<Window x:Class="MIOConfigurator.Windows.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mioConfig="clr-namespace:MIOConfig;assembly=MIOConfig"      
        xmlns:local="clr-namespace:MIOConfigurator"
        xmlns:qc="clr-namespace:QuickConverter;assembly=QuickConverter"
        xmlns:wpf="clr-namespace:Rubenhak.Common.WPF;assembly=Rubenhak.Common.WPF"
        xmlns:data="clr-namespace:MIOConfigurator.Data"
        xmlns:utilites="clr-namespace:MIOConfigurator.Utilites"
        xmlns:windows="clr-namespace:MIOConfigurator.Windows"
        mc:Ignorable="d"
        Title="Настройка МВВ" Height="600" Width="800" MinHeight="480" MinWidth="640" WindowStartupLocation="CenterScreen" 
        Closing="MainWindow_Closing" Loaded="MainWindow_Loaded">
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static windows:MainWindow.AddRouteCommand}"
                    Executed="AddRouteCommandExecute"
                    CanExecute="RouteCommandCanExecute"/>
        <CommandBinding Command="Save"
                    Executed="SaveCommandExecute"
                    CanExecute="RouteCommandCanExecute"/>
        <CommandBinding Command="{x:Static windows:MainWindow.DelRouteCommand}"
                    Executed="DelRouteCommandExecute"
                    CanExecute="RouteCommandCanExecute"/>
    </Window.CommandBindings>
    <Window.Resources>
        <Style TargetType="{x:Type MenuItem}" x:Key="ParentMenuStyle">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="White" Offset="0"/>
                        <GradientStop Color="Lavender" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type MenuItem}" x:Key="ChildMenuStyle">
            <Setter Property="Background" Value="Lavender"/>
        </Style>
        <Style TargetType="{x:Type Menu}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="White" Offset="0"/>
                        <GradientStop Color="Lavender" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TextBox}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">                    
                    <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={RelativeSource Self},                    
                    Path=(Validation.Errors)[0].ErrorContent}" />                    
                    <Setter Property="Foreground" Value="Red" />
                </Trigger>
                <Trigger Property="Validation.HasError" Value="False">                    
                    <Setter Property="Foreground" Value="Black" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <ControlTemplate x:Key="ValidationFailed">
            <StackPanel Orientation="Horizontal">
                <Border BorderBrush="Red" BorderThickness="2">
                    <AdornedElementPlaceholder />
                </Border>
                <Grid>
                    <Ellipse StrokeThickness="0" Fill="Red" Width="{TemplateBinding FontSize}" Height="{TemplateBinding FontSize}" />
                    <TextBlock Text="!" FontSize="{TemplateBinding FontSize}" FontWeight="Bold" Foreground="White" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
                </Grid>                
            </StackPanel>
        </ControlTemplate>
    </Window.Resources>
    <DockPanel UseLayoutRounding="True" Background="Lavender">
        <Menu DockPanel.Dock="Top" IsMainMenu="True" DataContext="MIOConfigurator.MainWindow" x:Name="MainMenu" FontSize="12">
            <MenuItem Header="_Соединение" Style="{StaticResource ParentMenuStyle}">
                <MenuItem x:Name="CmdConnect" Header="_Подключиться" Click="CmdConnect_OnClick" Style="{StaticResource ChildMenuStyle}">
                    <MenuItem.Icon>
                        <Image Height="16" Width="16" Source="Images/connected.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem x:Name="CmdDisconnect" Header="_Отключиться" Click="CmdDisconnect_OnClick" IsEnabled="False" Style="{StaticResource ChildMenuStyle}"></MenuItem>
            </MenuItem>
            <MenuItem Header="_Список устройств" IsEnabled="{Binding ElementName=CmdDisconnect, Path=IsEnabled}" Style="{StaticResource ParentMenuStyle}">
                <MenuItem x:Name="CmdFindDevices" Header="_Найти устройства..." Click="CmdFindDevices_OnClick" Style="{StaticResource ChildMenuStyle}"/>
                <MenuItem x:Name="CmdCancelSearchDevices" Header="_Прервать поиск" IsEnabled="False" Click="CmdCancelSearchDevices_OnClick" Style="{StaticResource ChildMenuStyle}"/>
                <MenuItem x:Name="CmdAddDeviceToList" Background="Lavender" Click="CmdAddDeviceToList_Click">
                    <MenuItem.Header>
                        <StackPanel Orientation="Horizontal" Background="Lavender">
                            <TextBlock Text="Добавить устройство с адресом:" HorizontalAlignment="Stretch" />
                            <TextBox x:Name="SlaveConcreteAddress" Margin="5,0,0,0" Width="40" Height="Auto"
                                wpf:TextBoxMaskBehavior.Mask="Integer"
        		                wpf:TextBoxMaskBehavior.MinimumValue="1"
                        		wpf:TextBoxMaskBehavior.MaximumValue="247" PreviewLostKeyboardFocus="SlaveConcreteAddress_OnPreviewLostKeyboardFocus"/>
                        </StackPanel>
                    </MenuItem.Header>
                </MenuItem>
                <MenuItem x:Name="CmdDelDeviceFromList" Header="_Удалить устройство из списка" IsEnabled="{Binding ElementName=DevicesList, Path=HasItems}" Style="{StaticResource ChildMenuStyle}" Click="CmdDelDeviceFromList_OnClick"/>
                <MenuItem x:Name="CmdDelAllDevicesFromList" Header="_Очистить список устройств" IsEnabled="{Binding ElementName=DevicesList, Path=HasItems}" Style="{StaticResource ChildMenuStyle}" Click="CmdDelAllDevicesFromList_Click"/>
            </MenuItem>
        </Menu>
        <Border DockPanel.Dock ="Bottom" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" BorderThickness="1">
            <StatusBar DockPanel.Dock ="Bottom">
                <StatusBar.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="Lavender" Offset="0"/>
                        <GradientStop Color="White" Offset="1"/>
                    </LinearGradientBrush>
                </StatusBar.Background>
                <StatusBar.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="100" />
                            </Grid.ColumnDefinitions>
                        </Grid>
                    </ItemsPanelTemplate>
                </StatusBar.ItemsPanel>
                <StatusBarItem>
                    <TextBlock x:Name="СonnectionStatus" Text="Отключено"/>
                </StatusBarItem>
                <Separator Grid.Column="1" Margin="1,0,1,0"/>
                <StatusBarItem Grid.Column="2">
                    <TextBlock x:Name="СurrentlyProcessed"/>
                </StatusBarItem>
                <Separator Grid.Column="3" Margin="1,0,1,0"/>
                <StatusBarItem Grid.Column="4">
                    <ProgressBar x:Name="ProcessingProgress" Width="90" Height="16">
                        <ProgressBar.Background>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="Lavender" Offset="0"/>
                                <GradientStop Color="White" Offset="1"/>
                            </LinearGradientBrush>
                        </ProgressBar.Background>
                    </ProgressBar>
                </StatusBarItem>
            </StatusBar>
        </Border>
        <Grid UseLayoutRounding="True" Background="Lavender">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*" MinWidth="100"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="5*" MinWidth="300"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <TextBlock FontSize="12" Text="Устройства" Margin="15,3,3,0" Foreground="DarkMagenta"/>
            <TextBlock Grid.Row="0" Grid.Column="2" FontSize="12" Text="Настройка" Margin="15,3,3,0" Foreground="DarkMagenta"/>
            <ListBox x:Name="DevicesList" Grid.Row="1" Grid.Column="0" Margin="10,10,0,10" HorizontalAlignment="Stretch" 
                     HorizontalContentAlignment="Stretch" Background="Lavender" ItemsSource="{Binding Path=Devices, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}" SelectionChanged="DevicesList_OnSelectionChanged">
                <ListBox.ContextMenu>
                    <ContextMenu>                        
                        <MenuItem Header="_Удалить устройство из списка" 
                                  IsEnabled="{qc:Binding '$P!=-1', P={Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ContextMenu}},Path=PlacementTarget.SelectedIndex}}"
                                  Style="{StaticResource ChildMenuStyle}" Click="CmdDelDeviceFromList_OnClick"/>
                        <MenuItem Header="_Очистить список устройств" 
                                  IsEnabled="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ContextMenu}},Path=PlacementTarget.HasItems}" 
                                  Style="{StaticResource ChildMenuStyle}" Click="CmdDelAllDevicesFromList_Click"/>
                        <Separator />
                        <MenuItem x:Name ="CmdReadConfiguration" Header="Прочитать конфигурацию устройства" 
                                  IsEnabled="{qc:Binding '$P!=-1', P={Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ContextMenu}},Path=PlacementTarget.SelectedIndex}}" 
                                  Style="{StaticResource ChildMenuStyle}" Click="CmdReadConfiguration_OnClick" />
                        <MenuItem x:Name ="CmdSaveConfiguration" Header="Записать конфигурацию в устройство" 
                                  IsEnabled="{qc:Binding '$P!=-1', P={Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ContextMenu}},Path=PlacementTarget.SelectedIndex}}" 
                                  Style="{StaticResource ChildMenuStyle}" Command="Save"/>
                        <MenuItem x:Name ="CmdRestart" Header="Выполнить перезагрузку устройства" 
                                  IsEnabled="{qc:Binding '$P!=-1', P={Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ContextMenu}},Path=PlacementTarget.SelectedIndex}}" 
                                  Style="{StaticResource ChildMenuStyle}" Click="CmdRestart_OnClick" />
                        <Separator></Separator>
                        <MenuItem Header="Записать конфигурацию в файл" 
                                  IsEnabled="{qc:MultiBinding '$P0!=-1 &amp;&amp; $P1!=null &amp;&amp; $P2==true', 
                                    P0={Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ContextMenu}},Path=PlacementTarget.SelectedIndex}, 
                                    P1={Binding Path=SelectedDevice, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}},
                                    P2={Binding Path=SelectedDevice.ConfigurationReadFromDevice, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}}"
                                  Style="{StaticResource ChildMenuStyle}" Click="CmdWriteToFile_OnClick"/>
                        <MenuItem Header="Прочитать конфигурацию из файла" 
                                  IsEnabled="{qc:Binding '$P!=-1', P={Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ContextMenu}},Path=PlacementTarget.SelectedIndex}}"
                                  Style="{StaticResource ChildMenuStyle}" Click="CmdReadFromFile_OnClick"/>
                    </ContextMenu>
                </ListBox.ContextMenu>
                <ListBox.ItemTemplate>
                    <DataTemplate DataType="mioConfig:Device">
                        <Border Margin="2,2,2,2" BorderThickness="2" CornerRadius="3" BorderBrush="DarkGreen">
                            <StackPanel Orientation="Horizontal" Style="{DynamicResource StackPanelLavenderTheme}">
                                <Image Margin="3" Source="/Windows/Images/rtu.png" 
                                    RenderOptions.BitmapScalingMode="Fant"
                                    Stretch="Fill"
                                    Width="69"
                                    Height="58">
                                    <Image.Effect>
                                        <DropShadowEffect></DropShadowEffect>
                                    </Image.Effect>
                                </Image>
                                <TextBlock Margin="3" TextWrapping="Wrap" Text="{Binding ShortDescription, UpdateSourceTrigger=PropertyChanged}" ToolTipService.ToolTip="{Binding Path=FullDescription, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                        </Border>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
            <GridSplitter Grid.Row="1" Grid.Column="1"
                Width="3" VerticalAlignment="Stretch" HorizontalAlignment="Center"
                ShowsPreview="False" Background="Lavender"></GridSplitter>
            <Grid UseLayoutRounding="True" Grid.Row="1" Grid.Column="2" Margin="0,0,0,0">
                <TextBlock x:Name ="NoItemsTextBlock" Margin="0,10,10,10" HorizontalAlignment="Center" VerticalAlignment="Center" Text="Нет элементов для отображения"/>
                <TabControl x:Name ="ConfigurationTabs"  Margin="0,10,10,10" Background="Lavender" IsEnabled="{Binding WorkerStopped,RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, UpdateSourceTrigger=PropertyChanged}" SelectionChanged="ConfigurationTabs_OnSelectionChanged">
                    <TabControl.Resources>
                        <Style TargetType="{x:Type TabItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TabItem}">
                                        <Grid>
                                            <Border 
                                                Name="Border"                                                
                                                Margin="0,0,-4,0"                                                 
                                                BorderThickness="1,1,1,1" 
                                                BorderBrush="CornflowerBlue"
                                                Background="Lavender"
                                                CornerRadius="2,12,0,0" >
                                                <ContentPresenter x:Name="ContentSite"
                                                        VerticalAlignment="Center"
                                                        HorizontalAlignment="Center"
                                                        ContentSource="Header"
                                                        Margin="12,2,12,2"
                                                        RecognizesAccessKey="True"/>
                                            </Border>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter Property="Panel.ZIndex" Value="100" />
                                                <Setter TargetName="Border" Property="Background">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                            <GradientStop Color="White" Offset="0"/>
                                                            <GradientStop Color="CornflowerBlue" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                                            </Trigger>
                                            <Trigger Property="IsSelected" Value="False">
                                                <Setter TargetName="Border" Property="Background">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                            <GradientStop Color="White" Offset="0"/>
                                                            <GradientStop Color="Lavender" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </TabControl.Resources>
                    <TabItem Header="Коммуникации">
                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="2*"></ColumnDefinition>
                                <ColumnDefinition Width="5*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <StackPanel Grid.Row ="0" Grid.Column="0">
                                <TextBlock Text="Порты устройства (USART)" Padding="5"></TextBlock>
                                <ListBox x:Name ="UartPots" VerticalAlignment="Top" Background="AliceBlue" Margin="5,5,5,5" 
                                    ItemsSource="{Binding Path=SelectedDevice.UartPortsConfigurations, 
                                    RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}" 
                                    SelectionChanged="UartPots_OnSelectionChanged"
                                    HorizontalContentAlignment="Stretch">
                                    <ListBox.ItemTemplate>
                                        <DataTemplate DataType="mioConfig:DeviceUARTPortConfiguration">
                                            <Border Margin="2" BorderThickness="1" CornerRadius="2" BorderBrush="Black" >
                                                <StackPanel Orientation="Horizontal" Background="AliceBlue">
                                                    <Image Margin="3" Source="Images/port-icon.png">
                                                        <Image.Effect>
                                                            <DropShadowEffect></DropShadowEffect>
                                                        </Image.Effect>
                                                    </Image>
                                                    <TextBlock Margin="3" TextWrapping="Wrap" Text="{Binding ShortDescription}"/>
                                                </StackPanel>
                                            </Border>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>
                            </StackPanel>
                            <StackPanel Grid.Row ="0" Grid.Column="1" Grid.IsSharedSizeScope="True">
                                <GroupBox Header="Общие настройки порта" Margin="5" Padding="5" HorizontalContentAlignment="Stretch">
                                    <StackPanel>
                                        <CheckBox Content="Порт активен" Margin="10,10,10,0" 
                                                  IsChecked="{qc:Binding '$P == 1', ConvertBack='$value?1:0',  P={Binding Path=SelectedPortConfiguration.PortOperation, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}}"
                                                  Visibility="{qc:Binding '$P==0 ? Visibility.Collapsed : Visibility.Visible', P={Binding ElementName=UartPots, Path=SelectedIndex}}"></CheckBox>
                                        <Grid Margin="10,10,10,0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition SharedSizeGroup="Labels" Width="Auto"></ColumnDefinition>
                                                <ColumnDefinition Width="*"></ColumnDefinition>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Row ="0" Grid.Column="0" HorizontalAlignment ="Right" Text="Скорость:" Padding="5"></TextBlock>
                                            <ComboBox x:Name="PortBaudRate" Grid.Row ="0" Grid.Column="1" Margin="5,5,5,5" 
                                                      SelectedItem="{Binding Path=SelectedPortConfiguration.PortSpeed, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}" 
                                                      ItemsSource="{Binding Path=SelectedPortConfiguration.AvailableComSpeeds, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}"></ComboBox>
                                            <TextBlock Grid.Row ="1" Grid.Column="0" HorizontalAlignment ="Right" Text="Количество бит в байте:" Padding="5"></TextBlock>
                                            <ComboBox x:Name="PortByteSize" Grid.Row ="1" Grid.Column="1" Margin="5,5,5,5"
                                                      SelectedItem="{Binding Path=SelectedPortConfiguration.PortByteSize, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}" 
                                                      ItemsSource="{Binding Path=SelectedPortConfiguration.AvailableComByteSizes, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}"></ComboBox>
                                            <TextBlock Grid.Row ="2" Grid.Column="0" HorizontalAlignment ="Right" Text="Контроль четности:" Padding="5"></TextBlock>
                                            <ComboBox x:Name="PortParity" Grid.Row ="2" Grid.Column="1" Margin="5,5,5,5"
                                                      SelectedItem="{qc:Binding 'Parity.None+$P', ConvertBack='$value', P={Binding Path=SelectedPortConfiguration.PortParity, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}}" 
                                                      ItemsSource="{Binding Path=SelectedPortConfiguration.AvailableComParities, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}"></ComboBox>
                                            <TextBlock Grid.Row ="3" Grid.Column="0" HorizontalAlignment ="Right" Text="Количество стоповых бит:" Padding="5"></TextBlock>
                                            <ComboBox x:Name="PortStopBits" Grid.Row ="3" Grid.Column="1" Margin="5,5,5,5"
                                                      SelectedItem="{Binding Path=SelectedPortConfiguration.PortStopBits, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}" 
                                                      ItemsSource="{Binding Path=SelectedPortConfiguration.AvailableComStopBits, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}"></ComboBox>
                                        </Grid>
                                    </StackPanel>
                                </GroupBox>
                                <GroupBox Header="Настройки протокола" Margin="5" Padding="5" HorizontalContentAlignment="Stretch">
                                    <StackPanel>
                                        <Grid Margin="10,10,10,0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition SharedSizeGroup="Labels" Width="Auto"></ColumnDefinition>
                                                <ColumnDefinition Width="*"></ColumnDefinition>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Row ="0" Grid.Column="0" HorizontalAlignment ="Right" Text="Протокол обмена:" Padding="5"></TextBlock>
                                            <ComboBox x:Name="PortProtocolType" Grid.Row ="0" Grid.Column="1" Margin="5,5,5,5" 
                                                      SelectedIndex="{Binding Path=SelectedPortConfiguration.PortProtocolType, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}" SelectionChanged="PortProtocolType_OnSelectionChanged">
                                                <ComboBoxItem Visibility="{qc:MultiBinding 
                                                    '($P0==0)||(!$P1) ? Visibility.Collapsed : Visibility.Visible', 
                                                    P0={Binding ElementName=UartPots, Path=SelectedIndex},
                                                    P1={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedDevice.ModuleModbusMasterPresent}}">
                                                    Modbus (master)</ComboBoxItem>
                                                <ComboBoxItem>Modbus (slave)</ComboBoxItem>
                                            </ComboBox>
                                        </Grid>
                                        <Grid Margin="10,10,10,0" Visibility="{qc:Binding '$P==0 ? Visibility.Visible : Visibility.Collapsed', P={Binding ElementName=PortProtocolType,Path=SelectedIndex}}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition SharedSizeGroup="Labels" Width="Auto"></ColumnDefinition>
                                                <ColumnDefinition Width="*"></ColumnDefinition>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Row ="0" Grid.Column="0" HorizontalAlignment ="Right" Text="Таймаут ответа:" Padding="5"></TextBlock>
                                            <TextBox x:Name="PortMasterTimeout" Grid.Row ="0" Grid.Column="1" Margin="5,5,5,5"
                                                        wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                        wpf:TextBoxMaskBehavior.MinimumValue="0"
        		                                        wpf:TextBoxMaskBehavior.MaximumValue="65535"
                                                        Text="{Binding Path=SelectedPortConfiguration.PortMasterTimeout, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}"></TextBox>
                                            <TextBlock Grid.Row ="1" Grid.Column="0" HorizontalAlignment ="Right" Text="Количество повторов запроса:" Padding="5"></TextBlock>
                                            <TextBox x:Name="PortRetries" Grid.Row ="1" Grid.Column="1" Margin="5,5,5,5"
                                                        wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                        wpf:TextBoxMaskBehavior.MinimumValue="0"
        		                                        wpf:TextBoxMaskBehavior.MaximumValue="255"
                                                        Text="{Binding Path=SelectedPortConfiguration.PortRetriesCount, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}"></TextBox>
                                        </Grid>
                                        <Grid Margin="10,10,10,0" Visibility="{qc:Binding '$P==1 ? Visibility.Visible : Visibility.Collapsed', P={Binding ElementName=PortProtocolType,Path=SelectedIndex}}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition SharedSizeGroup="Labels" Width="Auto"></ColumnDefinition>
                                                <ColumnDefinition Width="*"></ColumnDefinition>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Row ="0" Grid.Column="0" HorizontalAlignment ="Right" Text="Адрес slave:" Padding="5"></TextBlock>
                                            <TextBox x:Name="PortModbusAddress" Grid.Row ="0" Grid.Column="1" Margin="5,5,5,5"                                                         
                                                    wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                    wpf:TextBoxMaskBehavior.MinimumValue="1"
        		                                    wpf:TextBoxMaskBehavior.MaximumValue="247" TextChanged="PortModbusAddress_OnTextChanged"
                                                    Text="{Binding Path=SelectedPortConfiguration.PortModbusAddress, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}">
                                            </TextBox>
                                        </Grid>
                                    </StackPanel>
                                </GroupBox>
                            </StackPanel>
                        </Grid>
                    </TabItem>
                    <TabItem Header="Модуль ТС" Visibility="{qc:Binding '!$P ? Visibility.Collapsed : Visibility.Visible',                                                     
                                                P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedDevice.ModuleDIPresent}}">
                        <StackPanel Margin="5">
                            <CheckBox Content="Модуль в работе" Margin="10,10,10,0" 
                                              IsChecked="{qc:Binding '$P == 1', ConvertBack='$value?1:0',  P={Binding Path=SelectedDevice.DiscreetInputModuleConfiguration.ModuleOperation, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}}">
                            </CheckBox>
                            <Grid Margin="10,10,10,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="1*"></ColumnDefinition>
                                    <ColumnDefinition Width="2*"></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                </Grid.RowDefinitions>
                                <TextBlock Grid.Row ="0" Grid.Column="0" HorizontalAlignment ="Right" Text="Время гистерезиса на переключения (мс):" Padding="5"></TextBlock>
                                <TextBox Grid.Column="1" Margin="5,5,5,5"                                                         
                                                    wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                    wpf:TextBoxMaskBehavior.MinimumValue="20"
        		                                    wpf:TextBoxMaskBehavior.MaximumValue="1000"
                                                    Text="{Binding Path=SelectedDevice.DiscreetInputModuleConfiguration.HysteresisTime, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}">
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </TabItem>
                    <TabItem Header="Модуль ТУ" Visibility="{qc:Binding '!$P ? Visibility.Collapsed : Visibility.Visible',                                                     
                                                P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedDevice.ModuleDOPresent}}">
                        <StackPanel UseLayoutRounding="True" Margin="5">
                            <CheckBox Content="Модуль в работе" Margin="10,10,10,0" 
                                              IsChecked="{qc:Binding '$P == 1', ConvertBack='$value?1:0',  P={Binding Path=SelectedDevice.DiscreetOutputModuleConfiguration.ModuleOperation, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}}">
                            </CheckBox>
                            <Grid Margin="10,10,10,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="1*"></ColumnDefinition>
                                    <ColumnDefinition Width="2*"></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                </Grid.RowDefinitions>
                                <TextBlock Grid.Row ="0" Grid.Column="0" HorizontalAlignment ="Right" Text="Длина импульса (мс):" Padding="5"></TextBlock>
                                <TextBox Grid.Column="1" Margin="5,5,5,5"                                                         
                                                    wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                    wpf:TextBoxMaskBehavior.MinimumValue="100"
        		                                    wpf:TextBoxMaskBehavior.MaximumValue="4000"
                                                    Text="{Binding Path=SelectedDevice.DiscreetOutputModuleConfiguration.PulseDurationTime, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}">
                                </TextBox>
                            </Grid>
                            <StackPanel>
                                <Grid Margin="10,10,10,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                                        <ColumnDefinition Width="2*"></ColumnDefinition>
                                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                                        <ColumnDefinition Width="1*"></ColumnDefinition>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"></RowDefinition>
                                        <RowDefinition Height="Auto"></RowDefinition>
                                        <RowDefinition Height="Auto"></RowDefinition>
                                        <RowDefinition Height="Auto"></RowDefinition>
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Row ="0" Grid.Column="0" HorizontalAlignment ="Right" Text="Тип выхода №1:" Padding="5"></TextBlock>
                                    <ComboBox x:Name="Output1Type" Grid.Row ="0" Grid.Column="1" Margin="5,0,5,5"
                                              SelectedIndex="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=TwoWay, Path=SelectedDevice.DiscreetOutputModuleConfiguration.OutputType1}"
                                              IsEnabled="{qc:Binding '$P!=1',P={Binding ElementName=ParallelChannel4, Path=SelectedIndex}}">
                                        <ComboBoxItem>Не задействован</ComboBoxItem>
                                        <ComboBoxItem Visibility="Collapsed">Одинарное переключение</ComboBoxItem>
                                        <ComboBoxItem>Двойное переключение</ComboBoxItem>
                                        <ComboBoxItem Visibility="Collapsed" IsEnabled="False">Параллельный канал</ComboBoxItem>
                                    </ComboBox>

                                    <TextBlock Grid.Row ="1" Grid.Column="0" HorizontalAlignment ="Right" Text="Тип выхода №2:" Padding="5"></TextBlock>
                                    <ComboBox x:Name="Output2Type" Grid.Row ="1" Grid.Column="1" Margin="5,0,5,5"
                                                SelectedIndex="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=TwoWay, Path=SelectedDevice.DiscreetOutputModuleConfiguration.OutputType2}"
                                                IsEnabled="{qc:MultiBinding '$P0!=2 &amp;&amp; $P1!=2',
                                                P0={Binding  ElementName=Output1Type, Path=SelectedIndex},
                                                P1={Binding ElementName=ParallelChannel4, Path=SelectedIndex}}">
                                        <ComboBoxItem>Не задействован</ComboBoxItem>
                                        <ComboBoxItem Visibility="Collapsed">Одинарное переключение</ComboBoxItem>
                                        <ComboBoxItem Visibility="{qc:Binding '$P==2?Visibility.Visible:Visibility.Collapsed', P={Binding  ElementName=Output1Type, Path=SelectedIndex}}">
                                            Двойное переключение</ComboBoxItem>
                                        <ComboBoxItem IsEnabled="False">Параллельный канал</ComboBoxItem>
                                    </ComboBox>
                                    <TextBlock Grid.Row ="1" Grid.Column="2" HorizontalAlignment ="Right" Text="Параллельный канал:" Padding="5"
                                               Visibility="{qc:Binding '$P==2?Visibility.Visible:Visibility.Collapsed', P={Binding  ElementName=Output1Type, Path=SelectedIndex}}"></TextBlock>
                                    <ComboBox x:Name="ParallelChannel2" Grid.Row ="1" Grid.Column="3" Margin="5,0,5,5"
                                              Visibility="{qc:Binding '$P==2?Visibility.Visible:Visibility.Collapsed', P={Binding  ElementName=Output1Type, Path=SelectedIndex}}"
                                              SelectedIndex="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=TwoWay,Path=SelectedDevice.DiscreetOutputModuleConfiguration.ParallelChannelForOutput2}">
                                        <ComboBoxItem>Нет</ComboBoxItem>
                                        <ComboBoxItem Visibility="Collapsed">Выход №1</ComboBoxItem>
                                        <ComboBoxItem Visibility="Collapsed">Выход №2</ComboBoxItem>
                                        <ComboBoxItem>Выход №3</ComboBoxItem>
                                        <ComboBoxItem
                                            Visibility="{qc:Binding '$P!=2?Visibility.Visible:Visibility.Collapsed', P={Binding  ElementName=Output4Type, Path=SelectedIndex}}">
                                            Выход №4</ComboBoxItem>
                                    </ComboBox>

                                    <TextBlock Grid.Row ="2" Grid.Column="0" HorizontalAlignment ="Right" Text="Тип выхода №3:" Padding="5"></TextBlock>
                                    <ComboBox x:Name="Output3Type" Grid.Row ="2" Grid.Column="1" Margin="5,0,5,5"
                                              SelectedIndex="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=TwoWay, Path=SelectedDevice.DiscreetOutputModuleConfiguration.OutputType3}"
                                              IsEnabled="{qc:Binding '$P!=3',P={Binding ElementName=ParallelChannel2, Path=SelectedIndex}}">
                                        <ComboBoxItem>Не задействован</ComboBoxItem>
                                        <ComboBoxItem>Одинарное переключение</ComboBoxItem>
                                        <ComboBoxItem Visibility="{qc:Binding '$P==4?Visibility.Collapsed:Visibility.Visible', P={Binding  ElementName=ParallelChannel2, Path=SelectedIndex}}">Двойное переключение</ComboBoxItem>
                                        <ComboBoxItem Visibility="Collapsed" IsEnabled="False">Параллельный канал</ComboBoxItem>
                                    </ComboBox>

                                    <TextBlock Grid.Row ="3" Grid.Column="0" HorizontalAlignment ="Right" Text="Тип выхода №4:" Padding="5"></TextBlock>
                                    <ComboBox x:Name="Output4Type" Grid.Row ="3" Grid.Column="1" Margin="5,0,5,5"
                                                SelectedIndex="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=TwoWay, Path=SelectedDevice.DiscreetOutputModuleConfiguration.OutputType4}"
                                                IsEnabled="{qc:MultiBinding '$P0!=2 &amp;&amp; $P1!=4',
                                                P0={Binding  ElementName=Output3Type, Path=SelectedIndex},
                                                P1={Binding ElementName=ParallelChannel2, Path=SelectedIndex}}">
                                        <ComboBoxItem>Не задействован</ComboBoxItem>
                                        <ComboBoxItem>Одинарное переключение</ComboBoxItem>
                                        <ComboBoxItem Visibility="{qc:Binding '$P==2?Visibility.Visible:Visibility.Collapsed', P={Binding  ElementName=Output3Type, Path=SelectedIndex}}">
                                            Двойное переключение</ComboBoxItem>
                                        <ComboBoxItem IsEnabled="False">Параллельный канал</ComboBoxItem>
                                    </ComboBox>
                                    
                                    <!-- WAS "{qc:Binding '$P==2?Visibility.Visible:Visibility.Collapsed', P={Binding  ElementName=Output3Type, Path=SelectedIndex}}"> -->
                                    <TextBlock Grid.Row ="3" Grid.Column="2" HorizontalAlignment ="Right" Text="Параллельный канал:" Padding="5"
                                               Visibility= "Collapsed" >
                                    </TextBlock>
                                    
                                    <!-- WAS "{qc:Binding '$P==2?Visibility.Visible:Visibility.Collapsed', P={Binding  ElementName=Output3Type, Path=SelectedIndex}}" -->
                                    <ComboBox x:Name="ParallelChannel4" Grid.Row ="3" Grid.Column="3" Margin="5,0,5,5"
                                              Visibility= "Collapsed"
                                              SelectedIndex="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=TwoWay, Path=SelectedDevice.DiscreetOutputModuleConfiguration.ParallelChannelForOutput4}">
                                        <ComboBoxItem>Нет</ComboBoxItem>
                                        <ComboBoxItem
                                            Visibility="Collapsed">
                                            Выход №1</ComboBoxItem>
                                        <ComboBoxItem
                                            Visibility="{qc:Binding '$P!=2?Visibility.Visible:Visibility.Collapsed', P={Binding  ElementName=Output3Type, Path=SelectedIndex}}">
                                            Выход №2</ComboBoxItem>
                                        <ComboBoxItem Visibility="Collapsed">Выход №3</ComboBoxItem>
                                        <ComboBoxItem Visibility="Collapsed">Выход №4</ComboBoxItem>
                                    </ComboBox>
                                </Grid>
                            </StackPanel>
                        </StackPanel>
                    </TabItem>
                    <TabItem Header="Ретранслятор" Visibility="{qc:Binding '!$P ? Visibility.Collapsed : Visibility.Visible',                                                     
                                                P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedDevice.ModuleRouterPresent}}">
                        <DockPanel Margin="5" UseLayoutRounding="True">
                            <CheckBox DockPanel.Dock="Top" Content="Модуль в работе" Margin="10,10,10,0" 
                                              IsChecked="{Binding  Path=SelectedDevice.RoutingEnabled, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}">
                            </CheckBox>
                                                        
                            <StackPanel Margin="10" Orientation="Horizontal" DockPanel.Dock="Bottom">
                                <TextBlock FontSize="12" TextAlignment="Center" Text="Количество настроенных маршрутов:" >
                                    <TextBlock.Effect>
                                        <DropShadowEffect Direction="310" Color="#FFA09C9C"/>
                                    </TextBlock.Effect>
                                </TextBlock>
                                <TextBox                                                     
                                        x:Name="TextBoxRouteCount"
                                        wpf:TextBoxMaskBehavior.Mask="Integer"
        		                        wpf:TextBoxMaskBehavior.MinimumValue="0"
        		                        wpf:TextBoxMaskBehavior.MaximumValue="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path= SelectedDevice.UserRegistersCount}"
                                        Text="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window},Path=SelectedDevice.ConfiguredRoutingMapSize,Mode=TwoWay}"
                                        Width="100" Margin="10,0">                                    
                                </TextBox>
                                
                                <!--
                                <TextBlock Margin="10,0,0,0" FontSize="16" FontWeight="Bold" TextAlignment="Center" Foreground="Green" 
                                           Text="{Binding UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedDevice.ConfiguredRoutingMapSize}">
                                </TextBlock>
                                -->
                                <!--
                                <Button x:Name="AddRoute" Style="{DynamicResource EmptyButtonStyle}" Command="{x:Static local:MainWindow.AddRouteCommand}">
                                    <Image Height="32" Width="32" Source="Images/add-icon.png" Style="{DynamicResource ButtonImageHoverStyle}">
                                    </Image>
                                </Button>
                                <TextBlock TextWrapping="Wrap" FontSize="14" Width="64" TextAlignment="Center" Text="Добавить маршрут">
                                    <TextBlock.Effect>
                                        <DropShadowEffect Direction="310" Color="#FFA09C9C"/>
                                    </TextBlock.Effect>
                                </TextBlock>
                                <Button x:Name="DelRoute" Style="{DynamicResource EmptyButtonStyle}" Command="{x:Static local:MainWindow.AddRouteCommand}">
                                    <Image Height="32" Width="32" Source="Images/del-icon.png" Style="{DynamicResource ButtonImageHoverStyle}">
                                    </Image>
                                </Button>
                                <TextBlock TextWrapping="Wrap" FontSize="14" Width="64" TextAlignment="Center" Text="Удалить маршрут" >
                                    <TextBlock.Effect>
                                        <DropShadowEffect Direction="310" Color="#FFA09C9C"/>
                                    </TextBlock.Effect></TextBlock>
                                -->
                            </StackPanel>
                            
                            <DockPanel DockPanel.Dock="Top">
                                <Border DockPanel.Dock="Top" Margin="10,10,10,0" BorderThickness="1" BorderBrush="DarkOliveGreen">
                                    <TextBlock  Padding="4" Text="Карта пользовательских регистров" TextAlignment="Center" Foreground="Yellow" FontSize="14">
                                        <TextBlock.Background>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="White" Offset="0"/>
                                                <GradientStop Color="#FFB1B1F5" Offset="0.3"/>
                                                <GradientStop Color="#FF7878F3" Offset="0.7"/>
                                                <GradientStop Color="White" Offset="1"/>
                                            </LinearGradientBrush>
                                        </TextBlock.Background></TextBlock>
                                </Border>

                                <data:Proxy In="{Binding SelectedDeviceValidator, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=ElementValidationRule, Path=Validator}"/>

                                <utilites:EditableDataGrid DockPanel.Dock="Bottom" x:Name="RoutingMapGrid" Margin="10,3,10,10" AutoGenerateColumns="False" SelectionMode="Single" CanUserSortColumns="False" 
                                                           CanUserAddRows="False" CanUserResizeRows="False"
                                            ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedDevice.RoutingMap}"
                                            Background="AliceBlue" ColumnWidth="*" EnableRowVirtualization="False" CellEditEnding="RoutingMapGrid_CellEditEnding">
                                    <utilites:EditableDataGrid.Resources>
                                        <Style TargetType="{x:Type DataGridColumnHeader}">
                                            <Setter Property="Background" Value="Transparent" />
                                            <Setter Property="BorderBrush" Value="DarkGray"></Setter>
                                            <Setter Property="BorderThickness" Value="1"></Setter>
                                        </Style>
                                    </utilites:EditableDataGrid.Resources>
                                    <utilites:EditableDataGrid.Columns>
                                        <DataGridTextColumn Header="№" Width="Auto" IsReadOnly="True" 
                                                            Binding="{qc:Binding '$P.GetIndex()+1', P={Binding RelativeSource={RelativeSource AncestorType=DataGridRow}}}"
                                                            Foreground="Gray">
                                            <DataGridTextColumn.CellStyle>
                                                <Style TargetType="{x:Type DataGridCell}">
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                <GradientStop Color="Gainsboro" Offset="0"></GradientStop>
                                                                <GradientStop Color="White" Offset="1"></GradientStop>
                                                            </LinearGradientBrush>
                                                        </Setter.Value>    
                                                    </Setter>
                                                </Style>  
                                            </DataGridTextColumn.CellStyle>
                                            <DataGridTextColumn.HeaderStyle>
                                                <Style TargetType="{x:Type DataGridColumnHeader}">
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
                                                    <Setter Property="Padding" Value="5"></Setter>
                                                    <Setter Property="BorderBrush" Value="DarkGray"></Setter>
                                                    <Setter Property="BorderThickness" Value="1"></Setter>
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                <GradientStop Color="Gainsboro" Offset="0"></GradientStop>
                                                                <GradientStop Color="White" Offset="1"></GradientStop>
                                                            </LinearGradientBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </DataGridTextColumn.HeaderStyle>
                                        </DataGridTextColumn>
                                        <DataGridTemplateColumn Header="Регистр назначения">
                                            <DataGridTemplateColumn.HeaderStyle>
                                                <Style TargetType="{x:Type DataGridColumnHeader}">
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
                                                    <Setter Property="Padding" Value="5"></Setter>
                                                    <Setter Property="BorderBrush" Value="DarkGray"></Setter>
                                                    <Setter Property="BorderThickness" Value="1"></Setter>
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                <GradientStop Color="CadetBlue" Offset="0"></GradientStop>
                                                                <GradientStop Color="White" Offset="1"></GradientStop>
                                                            </LinearGradientBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </DataGridTemplateColumn.HeaderStyle>
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding RouteTo}"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <TextBox                                                     
                                                        x:Name="TextBoxRouteTo"
                                                        wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                        wpf:TextBoxMaskBehavior.MinimumValue="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path= SelectedDevice.UserRegistersStartAddressOffset}"
        		                                        wpf:TextBoxMaskBehavior.MaximumValue="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path= SelectedDevice.UserRegistersEndAddressOffset}">                                                        
                                                        <Binding Path="RouteTo" Mode="TwoWay">
                                                        </Binding>
                                                    </TextBox>
                                                    <DataTemplate.Triggers>
                                                        <Trigger SourceName="TextBoxRouteTo" Property="IsVisible" Value="True">
                                                            <Setter TargetName="TextBoxRouteTo" Property="FocusManager.FocusedElement" Value="{Binding ElementName=TextBoxRouteTo}"/>
                                                        </Trigger>
                                                    </DataTemplate.Triggers>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTemplateColumn Header="Регистр источник">
                                            <DataGridTemplateColumn.HeaderStyle>
                                                <Style TargetType="{x:Type DataGridColumnHeader}">
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
                                                    <Setter Property="Padding" Value="5"></Setter>
                                                    <Setter Property="BorderBrush" Value="DarkGray"></Setter>
                                                    <Setter Property="BorderThickness" Value="1"></Setter>
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                <GradientStop Color="BurlyWood" Offset="0"></GradientStop>
                                                                <GradientStop Color="White" Offset="1"></GradientStop>
                                                            </LinearGradientBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </DataGridTemplateColumn.HeaderStyle>
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding RouteFrom}"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <TextBox                                                         
                                                        x:Name="TextBoxRouteFrom"
                                                        Text="{Binding RouteFrom, Mode=TwoWay}" 
                                                        wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                        wpf:TextBoxMaskBehavior.MinimumValue="0"                                                             
        		                                        wpf:TextBoxMaskBehavior.MaximumValue="65535"/>
                                                    <DataTemplate.Triggers>
                                                        <Trigger SourceName="TextBoxRouteFrom" Property="IsVisible" Value="True">
                                                            <Setter TargetName="TextBoxRouteFrom" Property="FocusManager.FocusedElement" Value="{Binding ElementName=TextBoxRouteFrom}"/>
                                                        </Trigger>
                                                    </DataTemplate.Triggers>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                    </utilites:EditableDataGrid.Columns>

                                    <utilites:EditableDataGrid.RowValidationRules>
                                        <!--
                                        <data:RoutingElementValidationRule x:Name="ElementValidationRule" ValidationStep="CommittedValue" ValidatesOnTargetUpdated="True"/>
                                        -->
                                    </utilites:EditableDataGrid.RowValidationRules>

                                    <utilites:EditableDataGrid.RowValidationErrorTemplate>
                                        <ControlTemplate>
                                            <Grid Margin="0,-2,0,-2" 
                                                  ToolTip="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}},Path=(Validation.Errors)[0].ErrorContent}"
                                                  >                                                
                                                <Ellipse StrokeThickness="0" Fill="Yellow" Width="{TemplateBinding FontSize}" Height="{TemplateBinding FontSize}" />
                                                <TextBlock Text="!" FontSize="{TemplateBinding FontSize}" FontWeight="Bold" Foreground="Black" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </utilites:EditableDataGrid.RowValidationErrorTemplate>
                                </utilites:EditableDataGrid>                                
                            </DockPanel>
                        </DockPanel>
                    </TabItem>
                    <TabItem Header="Модуль Modbus (master)" Visibility="{qc:Binding '!$P ? Visibility.Collapsed : Visibility.Visible',                                                     
                                                P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedDevice.ModuleModbusMasterPresent}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"></ColumnDefinition>
                                <ColumnDefinition Width="2*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <TreeView Grid.Column="0" Grid.Row="0" Margin="5" x:Name="ModbusQueriesTreeView" Background="AliceBlue" 
                                      SelectedItemChanged="ModbusQueriesTreeView_OnSelectedItemChanged">                                
                            </TreeView>
                            <StackPanel Grid.Column="1" Grid.Row="0">

                                <data:Proxy In="{Binding SelectedDeviceValidator, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=RouteStartAddressValidationRule, Path=Validator}"/>
                                <data:Proxy In="{Binding SelectedModbusQuery, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=RouteStartAddressValidationRule, Path=SelectedQuery}"/>

                                <data:Proxy In="{Binding SelectedDeviceValidator, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=RegistersCountValidationRule, Path=Validator}"/>
                                <data:Proxy In="{Binding SelectedModbusQuery, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=RegistersCountValidationRule, Path=SelectedQuery}"/>

                                <data:Proxy In="{Binding SelectedDeviceValidator, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=QueryStatusAddressValidationRule, Path=Validator}"/>
                                <data:Proxy In="{Binding SelectedModbusQuery, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=QueryStatusAddressValidationRule, Path=SelectedQuery}"/>

                                <TextBlock   Text="Настройка запроса Modbus master" Margin="10"></TextBlock>
                                <CheckBox x:Name="QueryConfiguredCheckBox" Content="Запрос настроен" Margin="10,0" 
                                          IsChecked="{Binding Path=SelectedModbusQuery.QueryConfigured, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}" 
                                          Click="QueryConfiguredCheckBox_OnClick" 
                                          IsEnabled="{qc:Binding '$P==null?false:true', P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedModbusQuery}}">
                                </CheckBox>
                                <Grid Margin="10,5,10,0" x:Name ="ModbusQueryConfigurationGrid">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="2*"></ColumnDefinition>
                                        <ColumnDefinition Width="1*"></ColumnDefinition>
                                        
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition></RowDefinition>
                                        <RowDefinition></RowDefinition>
                                        <RowDefinition></RowDefinition>
                                        <RowDefinition></RowDefinition>
                                        <RowDefinition></RowDefinition>
                                        <RowDefinition></RowDefinition>
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="Адрес подчиненного (slave):" TextWrapping="Wrap" VerticalAlignment="Center"></TextBlock>
                                    <TextBlock Grid.Column="0" Grid.Row="1" Text="Функция запроса Modbus:" TextWrapping="Wrap" VerticalAlignment="Center"></TextBlock>
                                    <TextBlock Grid.Column="0" Grid.Row="2" Text="Начальный адрес в карте памяти подчиненного (slave):" TextWrapping="Wrap" VerticalAlignment="Center"></TextBlock>
                                    <TextBlock Grid.Column="0" Grid.Row="3" Text="Количество регистров в запросе:" TextWrapping="Wrap" VerticalAlignment="Center"></TextBlock>
                                    <TextBlock Grid.Column="0" Grid.Row="4" Text="Начальный адрес в области пользовательских регистров МВВ:" TextWrapping="Wrap" VerticalAlignment="Center"></TextBlock>
                                    <TextBlock Grid.Column="0" Grid.Row="5" Text="Адрес статуса запроса в области пользовательских регистров МВВ:" TextWrapping="Wrap" VerticalAlignment="Center"></TextBlock>

                                    <TextBox Grid.Column="1" Grid.Row="0" Height ="Auto" HorizontalAlignment="Stretch" Margin="5" VerticalAlignment="Center"
                                                wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                wpf:TextBoxMaskBehavior.MinimumValue="1"
        		                                wpf:TextBoxMaskBehavior.MaximumValue="247"
                                                Text="{Binding Path=SelectedModbusQuery.SlaveAddress, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}"
                                                IsEnabled="{qc:Binding '$P==null?false:true', P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedModbusQuery}}"></TextBox>
                                    <ComboBox Grid.Column="1" Grid.Row="1" Height ="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="5"
                                              SelectedIndex="{qc:Binding '$P>0?$P-1:0', ConvertBack='$value+1', P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window},Mode=TwoWay, Path=SelectedModbusQuery.ModbusFuctionCode}}"
                                              IsEnabled="{qc:Binding '$P==null?false:true', P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedModbusQuery}}"
                                              x:Name="ModbusFunctionCombobox">
                                        <ComboBoxItem>(1)Coil Status</ComboBoxItem>
                                        <ComboBoxItem>(2)Input Status</ComboBoxItem>
                                        <ComboBoxItem>(3)Holding Register</ComboBoxItem>
                                        <ComboBoxItem>(4)Input Register</ComboBoxItem>
                                    </ComboBox>
                                    <TextBox Grid.Column="1" Grid.Row="2" Height ="Auto" HorizontalAlignment="Stretch" Margin="5" VerticalAlignment="Center"                                             
                                                wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                wpf:TextBoxMaskBehavior.MinimumValue="0"
        		                                wpf:TextBoxMaskBehavior.MaximumValue="65535"
                                                Text="{Binding Path=SelectedModbusQuery.RegistersStartAddress, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}"
                                                IsEnabled="{qc:Binding '$P==null?false:true', P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedModbusQuery}}"></TextBox>
                                    <TextBox x:Name="RegistersCountInModbusQueryTextBox" Grid.Column="1" Grid.Row="3" Height ="Auto" HorizontalAlignment="Stretch" Margin="5" VerticalAlignment="Center"
                                                wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                wpf:TextBoxMaskBehavior.MinimumValue="0"
        		                                wpf:TextBoxMaskBehavior.MaximumValue="{qc:Binding '$P&gt;2?125:2000', P={Binding ElementName=ModbusFunctionCombobox, Path=SelectedIndex}}"
                                                IsEnabled="{qc:Binding '$P==null?false:true', P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedModbusQuery}}"
                                                Validation.ErrorTemplate="{StaticResource ValidationFailed}" LostFocus="RegistersCountInModbusQueryTextBox_LostFocus">
                                        <TextBox.Text>
                                            <Binding RelativeSource="{RelativeSource FindAncestor,AncestorType=Window}" Path="SelectedModbusQuery.RegistersCount" Mode="TwoWay" NotifyOnValidationError="True">
                                                <Binding.ValidationRules>
                                                    <!--
                                                    <data:ModbusQueryValidationRule x:Name="RegistersCountValidationRule" FieldNameToValidate="RegistersCount"></data:ModbusQueryValidationRule>
                                                    -->
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                    <TextBox x:Name="StartAddressOfModbusQueryTextBox"  Grid.Column="1" Grid.Row="4" Height ="Auto" HorizontalAlignment="Stretch" Margin="5" VerticalAlignment="Center"
                                                wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                wpf:TextBoxMaskBehavior.MinimumValue="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path= SelectedDevice.UserRegistersStartAddressOffset}"
        		                                wpf:TextBoxMaskBehavior.MaximumValue="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path= SelectedDevice.UserRegistersEndAddressOffset}"                                                
                                                IsEnabled="{qc:Binding '$P==null?false:true', P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedModbusQuery}}"
                                                Validation.ErrorTemplate="{StaticResource ValidationFailed}" LostFocus="StartAddressOfModbusQueryTextBox_LostFocus">
                                        <TextBox.Text>
                                            <Binding RelativeSource="{RelativeSource FindAncestor,AncestorType=Window}" Path="SelectedModbusQuery.RouteStartAddress" Mode="TwoWay" NotifyOnValidationError="True">
                                                <Binding.ValidationRules>
                                                    <!--
                                                    <data:ModbusQueryValidationRule x:Name="RouteStartAddressValidationRule" FieldNameToValidate="RouteStartAddress"></data:ModbusQueryValidationRule>
                                                    -->
                                                </Binding.ValidationRules>    
                                            </Binding>                                            
                                        </TextBox.Text>                                        
                                    </TextBox>
                                    <TextBox x:Name="StatusAddressOfModbusQueryTextBox" Grid.Column="1" Grid.Row="5" Height ="Auto" HorizontalAlignment="Stretch" Margin="5" VerticalAlignment="Center"
                                                wpf:TextBoxMaskBehavior.Mask="Integer"
        		                                wpf:TextBoxMaskBehavior.MinimumValue="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path= SelectedDevice.UserRegistersStartAddressOffset}"
        		                                wpf:TextBoxMaskBehavior.MaximumValue="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path= SelectedDevice.UserRegistersEndAddressOffset}"                                                
                                                IsEnabled="{qc:Binding '$P==null?false:true', P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedModbusQuery}}"
                                                Validation.ErrorTemplate="{StaticResource ValidationFailed}" LostFocus="StatusAddressOfModbusQueryTextBox_LostFocus">
                                        <TextBox.Text>
                                            <Binding RelativeSource="{RelativeSource FindAncestor,AncestorType=Window}" Path="SelectedModbusQuery.QueryStatusAddress" Mode="TwoWay" NotifyOnValidationError="True">
                                                <Binding.ValidationRules>
                                                    <!--
                                                    <data:ModbusQueryValidationRule x:Name="QueryStatusAddressValidationRule" FieldNameToValidate="QueryStatusAddress"></data:ModbusQueryValidationRule>
                                                    -->
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                </Grid>                                
                            </StackPanel>                            
                        </Grid>
                    </TabItem>
                    <TabItem Header="Монитор">
                        <WrapPanel Margin="0,10">
                            <Button Content="Статусы устройства" Padding="5" Margin="5" Click="StatusesMonitor_OnClick" 
                                    IsEnabled="{Binding WorkerStopped,RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, UpdateSourceTrigger=PropertyChanged}"
                                    Style="{DynamicResource ButtonGradientStyle}">
                            </Button>
                            <Button Content="Область пользовательских регистров" Padding="5" Margin="5" Visibility="{qc:Binding '$P&gt;0 ? Visibility.Visible: Visibility.Collapsed',                                                     
                                    P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedDevice.UserRegistersCount}}"
                                    IsEnabled="{Binding WorkerStopped,RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, UpdateSourceTrigger=PropertyChanged}"
                                    Style="{DynamicResource ButtonGradientStyle}" Click="UserRegsMonitorButton_Click">
                            </Button>
                            <Button x:Name="ModuleDIMonitor" Content="Модуль ТС" Padding="5" Margin="5"  Visibility="{qc:Binding '!$P ? Visibility.Collapsed : Visibility.Visible',                                                     
                                    P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedDevice.ModuleDIPresent}}"
                                    IsEnabled="{Binding WorkerStopped,RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, UpdateSourceTrigger=PropertyChanged}"
                                    Style="{DynamicResource ButtonGradientStyle}" Click="ModuleDIMonitor_Click"/>
                            <Button Content="Модуль ТУ" Padding="5" Margin="5" Visibility="{qc:Binding '!$P ? Visibility.Collapsed : Visibility.Visible',                                                     
                                    P={Binding RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, Path=SelectedDevice.ModuleDOPresent}}"
                                    IsEnabled="{Binding WorkerStopped,RelativeSource={RelativeSource FindAncestor,AncestorType=Window}, UpdateSourceTrigger=PropertyChanged}"
                                    Style="{DynamicResource ButtonGradientStyle}" Click="ModuleDOMonitor_Click">
                            </Button>
                        </WrapPanel>
                    </TabItem>
                </TabControl>
            </Grid>
        </Grid>
    </DockPanel>
</Window>
